1、什么是单元测试
Android单元测试(一)：JUnit框架的使用: https://blog.csdn.net/qq_17766199/article/details/78243176
单元测试
说到测试，主要分为，冒烟测试，集成测试，单元测试。单元测试是保证基础模块、单元工作正常的一种保证手段。在互联网短平快的敏捷开发的开发模式中，常常因为业务繁多，而忽视了单元测试，造成积重难返的局面。编程好比造房子，砖块好比每一个单元，只有保证每一块砖的坚实耐用，才能保证整个房子的坚固可靠。而在业务繁多的互联网公司，尤其是2C企业的业务部门，往往只是做一个活动，能跑起来就上线，几天后就下线，对性能，可靠性不是那么考量。但是，个人觉得SDK和支撑上层业务的基础能力是一定需要单元测试的。

单元测试理解
单元测试是保障单元可用性的途径，主要通过验证单元的逻辑，需要注意以下几点：

多条分支的逻辑必须覆盖
预期结果与实际结果必须一致才算测试通过
Java的单元测试
java的单元测试，主要通过jUnit框架来实现，通过注解来标注每个测试用例。通过断言来判断是否测试通过。
主要的注解有：

@Before
@After
@Test
@BeforeClass
@AfterClass

单元测试——是最小粒度的测试，以测试某个功能或代码块。一般由程序员来做，
因为它需要知道内部程序设计和编码的细
 单元测试的对象是软件设计的最小单位——模块。单元测试的依据是详细设描述，
 单元测试应对模块内所有重要的控制路径设计测试用例，以便发现模块内部的错误。
 单元测试多采用白盒测试技术，系统内多个模块可以并行地进行测试。

 单元测试任务

 单元测试任务包括：1 模块接口测试；2 模块局部数据结构测试；3 模块边界条件测试；4 模块中所有独立执行通路测试；5
 模块的各条错误处理通路测试。

 模块接口测试是单元测试的基础。只有在数据能正确流入、流出模块的前提下，其他测试才有意义。测试接口正确与否应该考虑下列因素：
 1 输入的实际参数与形式参数的个数是否相同；
 2 输入的实际参数与形式参数的属性是否匹配；
 3 输入的实际参数与形式参数的量纲是否一致；
 4 调用其他模块时所给实际参数的个数是否与被调模块的形参个数相同；
 5 调用其他模块时所给实际参数的属性是否与被调模块的形参属性匹配；
 6调用其他模块时所给实际参数的量纲是否与被调模块的形参量纲一致；
 7 调用预定义函数时所用参数的个数、属性和次序是否正确；
 8 是否存在与当前入口点无关的参数引用；
 9 是否修改了只读型参数；
 10 对全程变量的定义各模块是否一致；
 11是否把某些约束作为参数传递。

 如果模块内包括外部输入输出，还应该考虑下列因素：
 1 文件属性是否正确；
 2 OPEN/CLOSE语句是否正确；
 3 格式说明与输入输出语句是否匹配；
 4缓冲区大小与记录长度是否匹配；
 5文件使用前是否已经打开；
 6是否处理了文件尾；
 7是否处理了输入/输出错误；
 8输出信息中是否有文字性错误；

 Assert类中主要方法如下：
 方法名	方法描述
 assertEquals	断言传入的预期值与实际值是相等的
 assertNotEquals	断言传入的预期值与实际值是不相等的
 assertArrayEquals	断言传入的预期数组与实际数组是相等的
 assertNull	断言传入的对象是为空
 assertNotNull	断言传入的对象是不为空
 assertTrue	断言条件为真
 assertFalse	断言条件为假
 assertSame	断言两个对象引用同一个对象，相当于“==”
 assertNotSame	断言两个对象引用不同的对象，相当于“!=”
 assertThat	断言实际值是否满足指定的条件

 JUnit 中的常用注解：

 注解名	含义
 @Test	表示此方法为测试方法
 @Before	在每个测试方法前执行，可做初始化操作
 @After	在每个测试方法后执行，可做释放资源操作
 @Ignore	忽略的测试方法
 @BeforeClass	在类中所有方法前运行。此注解修饰的方法必须是static void
 @AfterClass	在类中最后运行。此注解修饰的方法必须是static void
 @RunWith	指定该测试类使用某个运行器
 @Parameters	指定测试类的测试数据集合
 @Rule	重新制定测试类中方法的行为
 @FixMethodOrder	指定测试类中方法的执行顺序

2、单元测试覆盖率
jacoco


3、Mockk
mockk框架遵循 mock - 监听 - 执行 - 验证 的流程，所以如果你之前已经学习过 Mockito，那么你将更加容易上手mockk
