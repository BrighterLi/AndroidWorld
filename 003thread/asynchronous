异步程序设计
https://blog.csdn.net/d510779720/article/details/121864529
长久以来，开发人员都面临着一个需要解决的问题——如何防止我们的应用程序被阻塞。 当我们在开发桌面应用，
移动应用，甚至服务端应用程序时，都希望避免让用户等待。
我们有很多途径来解决这种问题，包括：
线程
回调
Futures，Promises 等等
响应式扩展
协程

线程
线程并非廉价的。线程需要昂贵的上下文切换。
线程不是无限的。可被启动的线程数受底层操作系统的限制。在服务器端应用程序中，这可能会导致严重的瓶颈。
线程并不总是可用。在一些平台中，比如 JavaScript 甚至不支持线程。
线程不容易使用。线程的 Debug，避免竞争条件是我们在多线程编程中遇到的常见问题。


回调
原则上这感觉就像一个更优雅的解决方案，但又有几个问题：
回调嵌套的难度。通常被用作回调的函数，经常最终需要自己的回调。这导致了一系列回调嵌套并导致出现难以理
解的代码。该模式通常被称为标题圣诞树（大括号代表树的分支）。
错误处理很复杂。嵌套模型使错误处理和传播变得更加复杂。

回调在诸如 JavaScript 之类的事件循环体系结构中非常常见，但即使在那里，通常人们已经转而使用其他方
法，例如 promises 或响应式扩展。


Futures，Promises 等等


响应式扩展（Rx）

协程




