1、EventBus
Android框架之路——EventBus的使用: https://www.jianshu.com/p/428a5257839c
EventBus产生需求背景
     在做项目的时候往往需要应用程序内各组件间、组件与后台线程间的通信。比如耗时操作，等耗时操作完成后通过Handler
或Broadcast将结果通知给UI，N个Activity之间需要通过Listener通信

    之前我们会使用Intent，Handler，BroadcastReceiver进行模块间，线程间的通讯。这些都是开发过程中很常用的，
但是使用过程中相比EventBus这个发布、订阅的事件总线而言真的是 只能说EventBus开销小，代码简洁，以及将发送
者和接收者解耦，更利于开发

    EventBus是由greenrobot 组织贡献的一个Android事件发布/订阅轻量级框架。EventBus是一个Android端优化的
publish/subscribe消息总线，简化了应用程序内各组件间、组件与后台线程间的通信。比如请求网络，等网络返回时
通过Handler或Broadcast通知UI，两个Fragment之间需要通过Listener通信，这些需求都可以通过EventBus实现。

EventBus主要角色:
 Event 传递的事件对象
 Subscriber  事件的订阅者
 Publisher  事件的发布者
 ThreadMode 定义函数在何种线程中执行

EventBus的四种线程模型（ThreadMode）：                                                                                                                                                                                                                                 说一说POSTING，MAIN，BACKGROUND，ASYNC这四个所代表的含义吧
    POSTING  事件在那个线程发布，就在哪个线程里处理，发布和处理在同一个线程里，所以尽量避免处理耗时操作
    MAIN 事件的处理会在UI线程中执行。所以也不建议做耗时操作
    BACKGROUND 这个肯定是在子线程里处理的，如果你的发布线程是在主线程里，那么你处理事件时就会开启一个新的线程；
但是在子线程里发布，就是直接在这个子线程里进行数据处理。不要在里面进行UI更新
    ASYNC 这个类型的事件处理当然也是在子线程里进行的，无论你的发布线程是主线程还是子线程，它都会新建一个子线程进行数据处理，也是不要进行UI更新

粘性事件:
   之前说的使用方法，都是需要先注册(register)，再post,才能接受到事件；如果你使用postSticky发送事件，那么
可以不需要先注册，也能接受到事件，也就是一个延迟注册的过程。

 EventBus示例:
  之前做图片社交App的时候，需要处理一个点赞数据的同步，比如在作品的详情页点赞 需要同时更新列表页该作品的点赞数量，
  这里还是以此为例。

