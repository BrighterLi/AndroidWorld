1 MVC
Android MVC:https://www.jianshu.com/p/3e7573126514
什么是mvc设计模式 （附代码示例）:https://blog.csdn.net/Detective_/article/details/79260315?utm_medium=distribute.pc_relevant.none-task-blog-OPENSEARCH-6.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-6.nonecase

Android MVP模式简单例子实战:https://blog.csdn.net/qq_33048603/article/details/52824322
Android App的设计架构：MVC,MVP,MVVM与架构:https://www.jianshu.com/p/b9549aa0e1fe

理解MVC：
我们通过示意图1来理解MVC是如何在Android上运作起来的。
View：与用户交互，响应用户的操作；
Control：接收View的事件请求、数据等，通知Model；
Model：Model接收到Control指令后，独立运作，将结果通知给View；

例如：User现在要搜索联系人名字为Jack的号码是多少
View：在EditTextView中填写了Jack，点击搜索按钮Button；
Control：接收到交互View发出的搜索请求，和字符串Jack，通知Model进行数据查询；
Model：Model接受到关键字Jack，进行名字匹配，完毕后，通过接口给View发送号码，通知View显示；

MVC特点：
1、通常Android中Activity充当Control，布局中的各种View控件充当View；因为Activity既有Control又有View，所以Control和View有少量的耦合性；
2、MVC把View和Model层很好的分离，启到了很好的解耦作用，耦合性低，减少代码模块之间的相互影响；
3、耦合性低，可方便添加需求，扩展代码，减少代码的修改量；
3、M、V、C三层模块分明，利于代码维护；

View层 接收到用户操作事件，通知到 Controller 进行对应的逻辑处理，然后通知 Model去获取/更新数据，Model 再把新的数据 通知到 View 更新界面。这就是一个完整 MVC 的数据流向。
但在Android中，因为xml布局能力很弱，View的很多操作是在Activity/Fragment中的，而业务逻辑同样也是写在Activity/Fragment中。

在MVC里，View是可以直接访问Model的。从而，View里会包含Model信息，不可避免的还要包括一些业务逻辑。 在MVC模型里，更关注的Model的不变，而同时有多个对Model的不同显示，及View。
所以，在MVC模型里，Model不依赖于View，但是View是依赖于Model的。不仅如此，因为有一些业务逻辑在View里实现了，导致要更改View也是比较困难的，至少那些业务逻辑是无法重用的

MVC 的问题点 如下：
Activity/Fragment 责任不明，同时负责View、Controller，就会导致其中代码量大，不满足单一职责。
Model耦合View，View 的修改会导致 Controller 和 Model 都进行改动，不满足最少知识原则。



2 MVP
Android MVP:https://www.jianshu.com/p/f5e13706ae52
MVP，即Model(模型)、View(视图)、Presenter(主持人)。MVP是从经典的MVC演变而来。把数据处理，界面显示，逻辑处理分离开来。
界面和数据的所有通信都是通过P层来实现。是一个将后台任务和activities/views/fragment分离的方法，让它们独立于绝大多数跟生命周期相关的事件。

理解MVP：
View：与用户交互，响应用户的操作，显示数据，在Android中，通常是Activity、Fragment，View等；
Presenter：控制层，也负责处理后台任务；
Model：数据层，比如数据库接口，网络数据等；

例子：User现在要从读取一个Jack的名字并设置
MVP特点：
1、模型与视图完全分离，我们可以修改视图而不影响模型
2、可以更高效地使用模型，因为所有的交互都发生在一个地方——Presenter内部
3、我们可以将一个Presenter用于多个视图，而不需要改变Presenter的逻辑。这个特性非常的有用，因为视图的变化总是比模型的变化频繁。
4、如果我们把逻辑放在Presenter中，那么我们就可以脱离用户接口来测试这些逻辑（单元测试）

MVP解决了MVC的问题：
View责任明确，逻辑不再写在Activity中，而是在Presenter中;
Model不再持有View。

MVP的实现思路：
UI逻辑抽象成IView接口，由具体的Activity实现类来完成。且调用Presenter进行逻辑操作。
业务逻辑抽象成IPresenter接口，由具体的Presenter实现类来完成。逻辑操作完成后调用IView接口方法刷新UI。
MVP 本质是面向接口编程，实现了依赖倒置原则。MVP解决了View层责任不明的问题，但并没有解决代码耦合的问题，View和Presenter之间相互持有。

View层 接收到用户操作事件，通知到Presenter，Presenter进行逻辑处理，然后通知Model更新数据，Model 把更新的数据给到Presenter，Presenter再通知到 View 更新界面。

我们知道View层是容易变化且多种多样的,业务逻辑也是多种多样的,与传统的MVC相比,P充当了C的作用.

所以 MVP 有问题点 如下：
会引入大量的IView、IPresenter接口，增加实现的复杂度。
View和Presenter相互持有，形成耦合。

3 MVVM
MVC->MVP->MVVM架构完整演变过程剖析： https://www.cnblogs.com/webor2006/p/12463543.html
一篇文章带你入门 Android MVVM: https://www.jianshu.com/p/a15d6e68d93f
Android之练习MVVM+DataBinding框架模式：https://www.cnblogs.com/jiani/p/12609272.html
《Android构建MVVM》系列(一) 之 MVVM架构快速入门：https://www.cnblogs.com/xykjlcx/p/9469690.html
Android架构：https://zhuanlan.zhihu.com/p/359674915
Android MVVM Demo实战解析：https://www.jianshu.com/p/7cab764840f1
深入解析MVVM架构: https://blog.csdn.net/ljx1400052550/article/details/108357488
我理解的MVVM架构及实战Demo: https://www.jianshu.com/p/eb29f823e94e
Android MVVM模式: https://www.jianshu.com/p/58023332c74e
Mvvm架构MvvmHabit: https://github.com/goldze/MVVMHabit
安卓基于Mvvm架构模式重构实战: https://blog.csdn.net/u013823101/article/details/90380569
浅谈 Android MVC MVP MVVM：https://www.cnblogs.com/xq9527/p/14401192.html

DataBinding: 实现数据和UI双向绑定的框架
MVVM是一种设计思想，而DataBinding只是实现MVVM模式的一种方式而已，除此之外，实现MVVM还有另一种方式，那就是ViewModel+LiveData+Repository

Model ：负责数据实现和逻辑处理，类似MVP。
View ： 对应于Activity和XML，负责View的绘制以及与用户交互，类似MVP。
在MVP模式中，View的界面更新是由Presenter层驱动的，而在MVVM模式中，View的界面更新是采用观察者模式去动态监听数据变化，数据改变后由自己来改变，变被动为主动，
这样View层与其他层的耦合度进一步降低了。并且若采用了DataBinding的形式后，View的UI数据更改完全由程序自动化更改，我们少去很多初始化工作和setText()等繁复操作。
ViewModel ： 创建关联，将model和view绑定起来,如此之后，我们model的更改，通过viewmodel反馈给view,从而自动刷新界面。
但是它相比Presenter层的优点在于，它不用去通知View层去更新UI界面，降低了和View的耦合度，并且同一个ViewModel可以同时绑定多个View层，达到共同更新数据的目的。

MVVM 的本质是 数据驱动，把解耦做的更彻底，viewModel不持有view 。
View 产生事件，使用 ViewModel进行逻辑处理后，通知Model更新数据，Model把更新的数据给ViewModel，ViewModel自动通知View更新界面，而不是主动调用View的方法。

MVVM特点：
1、双向绑定、数据驱动
在常规的开发模式中，数据变化需要更新UI的时候，需要先获取UI控件的引用，然后再更新UI。获取用户的输入和操作也需要通过UI控件的引用。在MVVM中，这些都是通过数据驱动来自动完成的，
数据变化后会自动更新UI，UI的改变也能自动反馈到数据层，数据成为主导因素。这样MVVM层在业务逻辑处理中只要关心数据，不需要直接和UI打交道，在业务处理过程中简单方便很多。
2、高度解耦
MVVM模式中，数据是独立于UI的。
数据和业务逻辑处于一个独立的ViewModel中，ViewModel只需要关注数据和业务逻辑，不需要和UI或者控件打交道。UI想怎么处理数据都由UI自己决定，ViewModel不涉及任何和UI相关的事，
也不持有UI控件的引用。即便是控件改变了（比如：TextView换成EditText），ViewModel也几乎不需要更改任何代码。它非常完美的解耦了View层和ViewModel，解决了上面我们所说的MVP的痛
点。
3、可复用、易测试、方便协同开发
一个ViewModel可以复用到多个View中。同样的一份数据，可以提供给不同的UI去做展示。对于版本迭代中频繁的UI改动，更新或新增一套View即可。如果想在UI上做A/B Testing，
那MVVM是你不二选择。
MVVM的分工是非常明显的，由于View和ViewModel之间是松散耦合的：一个是处理业务和数据、一个是专门的UI处理。所以，完全由两个人分工来做，一个做UI（XML和Activity）
一个写ViewModel，效率更高
ViewModel层做的事是数据处理和业务逻辑，View层中关注的是UI，两者完全没有依赖。不管是UI的单元测试还是业务逻辑的单元测试，都是低耦合的。在MVVM中数据是直接绑定到UI控件上
（部分数据是可以直接反映出UI上的内容），那么我们就可以直接通过修改绑定的数据源来间接做一些Android UI上的测试。

MVVM这中开发模式的优点自不必多说，可以实现视图和逻辑代码的解耦，而且，按照Google的说法，使用了MVVM的开发模式，还可以提高布局文件的解析速度，个人觉得这一点非常重要。
我们在安卓开发中经常需要写很多个findViewById，让人心烦，很多人不想写这个于是用了一些注解框架，可是注解框架无论性能多好，效率总是要低于findViewById的，因此，
Android中的MVVM也即databinding可以帮助我们彻底解决这个问题。

优点：
数据和布局文件实现双向绑定，我们仅关心数据的改变即可，View层UI的改变会通过数据的改变而改变。省去写findViewById和setText()等繁复的代码的工作。
View层更新UI的操作完全由自己决定，而无需其他层级的通知，变被动为主动，同时也减轻了其他层级的负担。
View层和ViewModel层完全解耦，并且ViewModel层可同时绑定多个View层，去同时更新数据的变化。
缺点：
View层对ViewModel层数据变化采用监听的方式，若数据种类过多，则需要写多个监听器观测。
若ViewModel层数据未改变，而需要View层去改变UI时，则非常不方便，需要使用其他方式实现（比如增加额外监听器）。
Android Studio对MVVM模式的支持还不是很完善，Binding类的生成可能需要多次Rebuild的操作，若Binding类过多，则编译工作会耗时很大；
MVVM模式下，因为View层和ViewModel层完全独立的关系，程序如果报错则很难定位具体问题，排查问题困难。
总的来说:
MVVM模式我认为还是一个非常优秀的模式，它省去了MVP模式中编写巨量接口的麻烦，同时将View层和ViewModel层完全解耦，若可以接受上述总结中的缺点项，
我认为项目完全可以采用MVVM模式去进行开发。





