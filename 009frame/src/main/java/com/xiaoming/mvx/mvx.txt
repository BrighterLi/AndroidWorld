1 MVC
Android MVC:https://www.jianshu.com/p/3e7573126514
什么是mvc设计模式 （附代码示例）:https://blog.csdn.net/Detective_/article/details/79260315?utm_medium=distribute.pc_relevant.none-task-blog-OPENSEARCH-6.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-6.nonecase

Android MVP模式简单例子实战:https://blog.csdn.net/qq_33048603/article/details/52824322
Android App的设计架构：MVC,MVP,MVVM与架构:https://www.jianshu.com/p/b9549aa0e1fe

理解MVC：
我们通过示意图1来理解MVC是如何在Android上运作起来的。
View：与用户交互，响应用户的操作；
Control：接收View的事件请求、数据等，通知Model；
Model：Model接收到Control指令后，独立运作，将结果通知给View；

例如：User现在要搜索联系人名字为Jack的号码是多少
View：在EditTextView中填写了Jack，点击搜索按钮Button；
Control：接收到交互View发出的搜索请求，和字符串Jack，通知Model进行数据查询；
Model：Model接受到关键字Jack，进行名字匹配，完毕后，通过接口给View发送号码，通知View显示；

MVC特点：
1、通常Android中Activity充当Control，布局中的各种View控件充当View；因为Activity既有Control又有View，所以Control和View有少量的耦合性；
2、MVC把View和Model层很好的分离，启到了很好的解耦作用，耦合性低，减少代码模块之间的相互影响；
3、耦合性低，可方便添加需求，扩展代码，减少代码的修改量；
3、M、V、C三层模块分明，利于代码维护；

2 MVP
Android MVP:https://www.jianshu.com/p/f5e13706ae52
MVP，即Model(模型)、View(视图)、Presenter(主持人)。MVP是从经典的MVC演变而来。把数据处理，界面显示，逻辑处理分离开来。
界面和数据的所有通信都是通过P层来实现。是一个将后台任务和activities/views/fragment分离的方法，让它们独立于绝大多数跟生命周期相关的事件。

理解MVP：
View：与用户交互，响应用户的操作，显示数据，在Android中，通常是Activity、Fragment，View等；
Presenter：控制层，也负责处理后台任务；
Model：数据层，比如数据库接口，网络数据等；

例子：User现在要从读取一个Jack的名字并设置
MVP特点：
1、模型与视图完全分离，我们可以修改视图而不影响模型
2、可以更高效地使用模型，因为所有的交互都发生在一个地方——Presenter内部
3、我们可以将一个Presenter用于多个视图，而不需要改变Presenter的逻辑。这个特性非常的有用，因为视图的变化总是比模型的变化频繁。
4、如果我们把逻辑放在Presenter中，那么我们就可以脱离用户接口来测试这些逻辑（单元测试）
